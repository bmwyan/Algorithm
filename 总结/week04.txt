1.对于二维数组进行DFS遍历(如岛屿类问题)，网格化可以采用如下通用代码模板
dfs(grid,i,j)
{
   //判断坐标i j是否在网络范围内
  if( !validArea(grid,i,j)||grid[i][j]!= 1){
        return;
  }

  if( grid[i][j]== 1){
        //标识成已遍历
        grid[i][j]=2;
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
  }
}

validArea(grid,i,j)
{
    return (i>=0&&i<grid.length&&j>=0&&j<grid[0].lenght);
}


//主函数
main(){
 for(int i=0;i<grid.lenght;i++)
   for(int j=0;j<grid[0].lenght;j++){
       if(grid[i][j]==1){
           dfs(grid,i,j);
       }
   }
}

2.BFS主要用来层序遍历、最短路径问题

对于二维数组进行BFS遍历模板
bfs(grid,i,j)
{
    Queue<int[]> queue = new ArrayDeque<>();
    queue.add(new int[]{i,j});
    while(!queue.isEmpty()){
        int size=queue.size();
        for(int i=0;i<size;i++){
            int[] node=queu.poll();
            int r=node[0];
            int c=node[1];

            if(r-1>0&& grid[r-1][c]==0)
            {
                grid[r-1][c]=2;
                queue.add(new int[]{r-1,c});
            }

            if(r+1<grid.length&& grid[r+1][c]==0)
            {
                grid[r+1][c]=2;
                queue.add(new int[]{r+1,c});
            }

            if(c-1>0&& grid[r][c-1]==0)
            {
                grid[r-1][c]=2;
                queue.add(new int[]{r,c-1});
            }

            if(c+1<grid[0].length&& grid[r][c+1]==0)
            {
                grid[r][c+1]=2;
                queue.add(new int[]{r,c+1});
            }
        }
    }
}

其中上面4个方向可以优化成数组和循环
int[] dx=new int[]{0,0,1,-1};
int[] dy=new int[]{1,-1,0,0};

bfs(grid,i,j)
{
    Queue<int[]> queue = new ArrayDeque<>();
    queue.add(new int[]{i,j});
    while(!queue.isEmpty()){
        int size=queue.size();
        for(int i=0;i<size;i++){
            int[] node=queu.poll();
            int r=node[0];
            int c=node[1];

            for(int k=0;k<4;k++){
                int x=r+dx[k];
                int y=c+dy[k];
                if(validArea(grid,x,y)&& grid[x][y]==0){
                    grid[x][y]=2;
                    queue.add(new int[]{x,y});
                }
            }

            //4个方向还可以优化成一个数组定义
            //{-1,0,1,0,-1};  x 取K,y取K+1
            // x-1,y ;  x,y+1 ; x+1,y  ;x,y-1;
        }
    }
}





















2.二维数组进行BFS：可以寻找最短或最长路径，分层向外辐射