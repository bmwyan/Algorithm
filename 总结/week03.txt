一、递归四路：
1）定义递归终结条件
2）处理当前层逻辑
3）下探到下一层
4）清理当前层：可能会有全局变量等
思维要点：
1.不要人肉递归
2.找到最近最简单的方法，将其拆解成成可重复解决的问题（重复子问题）
3.数据归纳法思维
JAVA代码模板：
public void recur(int level,int param)
{
    if(level>MAX_LEVEL){
        //process result
        return;
    }

    process(level,param);

    recur(level+1,newParam);

    //restore current status

}

二、对于回溯的理解还是不够透彻：下面的这个链接讲解的不错

回溯法，一般可以解决如下几种问题：
组合问题：N个数里面按一定规则找出k个数的集合
排列问题：N个数按一定规则全排列，有几种排列方式
切割问题：一个字符串按一定规则有几种切割方式
子集问题：一个N个数的集合里有多少符合条件的子集
棋盘问题：N皇后，解数独等等


学习链接：https://www.bilibili.com/video/BV1cy4y167mM
文字版：https://mp.weixin.qq.com/s/gjSgJbNbd1eAA5WkA-HeWw

回溯代码模板一般如下
一般可以抽象为N叉树，树的宽度一般是集合大小（每个节点处理的集合大小），深度是一般是递归的深度
N叉树的宽度方向用循环
N叉树的深度方向用递归，递归是有终止条件的

一般剪枝在循环数组中， 不同的剪枝方法，性能不一样，比如leecode46全排列中 set判断是否使用和用一个数组来存取是否用过，性能有差异。
回溯的终止条件可以用level一层层加，最后和SIZE一样，也可以判断结果是否

public void backTracking(level,params)
{
    if(终止条件){// 一般是叶子结点
        //收集结果
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理结果
    }

}



